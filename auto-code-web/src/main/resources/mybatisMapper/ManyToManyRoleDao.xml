<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zengtengpeng.ManyToMany.dao.ManyToManyRoleDao">

	<resultMap id="BaseResultMap" type="com.zengtengpeng.ManyToMany.bean.ManyToManyRole">

		<id column="id" jdbcType="INTEGER" property="id" />

		<result column="name" jdbcType="VARCHAR" property="name" />

		<result column="status" jdbcType="INTEGER" property="status" />

		<result column="create_user_id" jdbcType="INTEGER" property="createUserId" />

		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />

		<result column="update_user_id" jdbcType="INTEGER" property="updateUserId" />

		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />

		<result column="dels" jdbcType="INTEGER" property="dels" />

	</resultMap>

	<insert id="insert" keyColumn="id" keyProperty="id" useGeneratedKeys="true" >
		insert into test_many_to_many_role (
		name,
		status,
		create_user_id,
		update_user_id,
		update_time,
		dels
		)
 	   values (
		 #{name,jdbcType=VARCHAR},
		 #{status,jdbcType=INTEGER},
		 #{createUserId,jdbcType=INTEGER},
		 #{updateUserId,jdbcType=INTEGER},
		 #{updateTime,jdbcType=TIMESTAMP},
		 #{dels,jdbcType=INTEGER}
		)


	</insert>

	<delete id="deleteByPrimaryKey" >
		delete from  test_many_to_many_role 

		where id = #{id} 
 

	</delete>

	<update id="update" >
		update test_many_to_many_role
		<set>
			<if test="name!=null and name!=''">name = #{name,jdbcType=VARCHAR}, </if>
			<if test="status!=null">status = #{status,jdbcType=INTEGER}, </if>
			<if test="createUserId!=null">create_user_id = #{createUserId,jdbcType=INTEGER}, </if>
			<if test="createTime!=null">create_time = #{createTime,jdbcType=TIMESTAMP}, </if>
			<if test="updateUserId!=null">update_user_id = #{updateUserId,jdbcType=INTEGER}, </if>
			<if test="updateTime!=null">update_time = #{updateTime,jdbcType=TIMESTAMP}, </if>
			<if test="dels!=null">dels = #{dels,jdbcType=INTEGER}, </if>
		</set>
		where id=#{id}

	</update>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" >
		select
		id,
		name,
		status,
		create_user_id,
		create_time,
		update_user_id,
		update_time,
		dels
		from test_many_to_many_role
		where id = #{id,jdbcType=INTEGER}

	</select>

	<select id="selectAll" resultMap="BaseResultMap" >
		select
		id,
		name,
		status,
		create_user_id,
		create_time,
		update_user_id,
		update_time,
		dels
		from test_many_to_many_role
		<where>
		<if test="id!=null "> and test_many_to_many_role.id = #{id,jdbcType=INTEGER}</if>
		<if test="name!=null and name!=''"> and test_many_to_many_role.name = #{name,jdbcType=VARCHAR}</if>
		<if test="status!=null "> and test_many_to_many_role.status = #{status,jdbcType=INTEGER}</if>
		<if test="createUserId!=null "> and test_many_to_many_role.create_user_id = #{createUserId,jdbcType=INTEGER}</if>
		<if test="createTime!=null "> and test_many_to_many_role.create_time = #{createTime,jdbcType=TIMESTAMP}</if>
		<if test=" startDate!=null and startDate!='' and endDate!=null and endDate!='' "> and test_many_to_many_role.create_time BETWEEN #{startDate} and #{endDate}</if>
		<if test="updateUserId!=null "> and test_many_to_many_role.update_user_id = #{updateUserId,jdbcType=INTEGER}</if>
		<if test="updateTime!=null "> and test_many_to_many_role.update_time = #{updateTime,jdbcType=TIMESTAMP}</if>
		<if test="dels!=null "> and test_many_to_many_role.dels = #{dels,jdbcType=INTEGER}</if>
		</where>
		<choose>
          <when test="orderByString!=null and orderByString!=''">
              ${orderByString}
          </when>
          <otherwise>
              order by id desc
          </otherwise>
      </choose>

	</select>

	<select id="selectByCondition" resultMap="BaseResultMap" >
		select
		id,
		name,
		status,
		create_user_id,
		create_time,
		update_user_id,
		update_time,
		dels
		from test_many_to_many_role
		<where>
		<if test="id!=null "> and test_many_to_many_role.id = #{id,jdbcType=INTEGER}</if>
		<if test="name!=null and name!=''"> and test_many_to_many_role.name = #{name,jdbcType=VARCHAR}</if>
		<if test="status!=null "> and test_many_to_many_role.status = #{status,jdbcType=INTEGER}</if>
		<if test="createUserId!=null "> and test_many_to_many_role.create_user_id = #{createUserId,jdbcType=INTEGER}</if>
		<if test="createTime!=null "> and test_many_to_many_role.create_time = #{createTime,jdbcType=TIMESTAMP}</if>
		<if test=" startDate!=null and startDate!='' and endDate!=null and endDate!='' "> and test_many_to_many_role.create_time BETWEEN #{startDate} and #{endDate}</if>
		<if test="updateUserId!=null "> and test_many_to_many_role.update_user_id = #{updateUserId,jdbcType=INTEGER}</if>
		<if test="updateTime!=null "> and test_many_to_many_role.update_time = #{updateTime,jdbcType=TIMESTAMP}</if>
		<if test="dels!=null "> and test_many_to_many_role.dels = #{dels,jdbcType=INTEGER}</if>
		</where>
		<choose>
          <when test="orderByString!=null and orderByString!=''">
              ${orderByString}
          </when>
          <otherwise>
              order by id desc
          </otherwise>
      </choose>

	</select>

	<select resultMap="BaseResultMap" id="selectManyToManyRoleByManyToManyUser" >
		SELECT
			test_many_to_many_role.id,
			test_many_to_many_role.name,
			test_many_to_many_role.status,
			test_many_to_many_role.create_user_id,
			test_many_to_many_role.create_time,
			test_many_to_many_role.update_user_id,
			test_many_to_many_role.update_time,
			test_many_to_many_role.dels
		FROM
			test_many_to_many_role,test_many_to_many_user_role
		WHERE test_many_to_many_role.id=test_many_to_many_user_role.role_id
		and test_many_to_many_user_role.user_id=#{userId}
		<if test="id!=null "> and test_many_to_many_role.id = #{id,jdbcType=INTEGER}</if>
		<if test="name!=null and name!=''"> and test_many_to_many_role.name = #{name,jdbcType=VARCHAR}</if>
		<if test="status!=null "> and test_many_to_many_role.status = #{status,jdbcType=INTEGER}</if>
		<if test="createUserId!=null "> and test_many_to_many_role.create_user_id = #{createUserId,jdbcType=INTEGER}</if>
		<if test="createTime!=null "> and test_many_to_many_role.create_time = #{createTime,jdbcType=TIMESTAMP}</if>
		<if test=" startDate!=null and startDate!='' and endDate!=null and endDate!='' "> and test_many_to_many_role.create_time BETWEEN #{startDate} and #{endDate}</if>
		<if test="updateUserId!=null "> and test_many_to_many_role.update_user_id = #{updateUserId,jdbcType=INTEGER}</if>
		<if test="updateTime!=null "> and test_many_to_many_role.update_time = #{updateTime,jdbcType=TIMESTAMP}</if>
		<if test="dels!=null "> and test_many_to_many_role.dels = #{dels,jdbcType=INTEGER}</if>

	</select>

	<delete id="deleteManyToManyRoleByManyToManyUser" >
		DELETE FROM test_many_to_many_user_role WHERE user_id=#{userId}
	</delete>

	<insert id="insertRelation" >
		INSERT INTO test_many_to_many_user_role(
			user_id,role_id
		) VALUES
		<foreach collection ="userId" item="row"  separator =",">
			(
			#{row},#{id}
			)
		</foreach>

	</insert>


</mapper>